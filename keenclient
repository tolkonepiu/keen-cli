#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
keenclient_usage() {
  if [[ -n $long_usage ]]; then
    printf "keenclient - Keenetic http client\n"
    echo

  else
    printf "keenclient - Keenetic http client\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keenclient COMMAND\n"
  printf "  keenclient [COMMAND] --help | -h\n"
  printf "  keenclient --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Log in to a Keenetic router\n" "login  "
  printf "  %s   Make a request to a Keenetic router\n" "request"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "KEENETIC_USERNAME (required)"
    printf "    Keenetic username\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "KEENETIC_PASSWORD (required)"
    printf "    Keenetic password\n"
    echo

  fi
}

# :command.usage
keenclient_login_usage() {
  if [[ -n $long_usage ]]; then
    printf "keenclient login - Log in to a Keenetic router\n"
    echo

  else
    printf "keenclient login - Log in to a Keenetic router\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keenclient login [OPTIONS]\n"
  printf "  keenclient login --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--hostname HOSTNAME"
    printf "    Host address\n"
    printf "    Default: 192.168.1.1\n"
    echo

    # :flag.usage
    printf "  %s\n" "--port PORT"
    printf "    Port number\n"
    echo

    # :flag.usage
    printf "  %s\n" "--https"
    printf "    Use https\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  keenclient login --hostname 192.168.0.1 --port 8080\n"
    printf "  keenclient login --https --hostname myrouter01.keenetic.link\n"
    echo

  fi
}

# :command.usage
keenclient_request_usage() {
  if [[ -n $long_usage ]]; then
    printf "keenclient request - Make a request to a Keenetic router\n"
    echo

  else
    printf "keenclient request - Make a request to a Keenetic router\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keenclient request URL_PATH [REQUEST_DATA] [OPTIONS]\n"
  printf "  keenclient request --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--hostname HOSTNAME"
    printf "    Host address\n"
    printf "    Default: 192.168.1.1\n"
    echo

    # :flag.usage
    printf "  %s\n" "--port PORT"
    printf "    Port number\n"
    echo

    # :flag.usage
    printf "  %s\n" "--https"
    printf "    Use https\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUT"
    printf "    Write to file instead of stdout\n"
    echo

    # :flag.usage
    printf "  %s\n" "--verbose"
    printf "    Make the client more talkative\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "URL_PATH"
    printf "    URL path\n"
    echo

    # :argument.usage
    printf "  %s\n" "REQUEST_DATA"
    printf "    JSON request data\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  keenclient request /rci/\n"
    printf "  keenclient request -p 8080 --verbose /rci/\n"
    printf "  keenclient request -o /tmp/dump /rci/\n"
    printf "  keenclient request --https --hostname myrouter01.keenetic.link /rci/\n"
    printf "  keenclient request --https --hostname myrouter01.keenetic.link /rci/\n  '[{\"show\":{\"interface\":{}}}]'\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/functions/calculate_hash.sh
# shellcheck shell=bash disable=SC2154
function calculate_hash() {
  local login password x_ndm_realm x_ndm_challenge

  login=${1:?login must be set}
  password=${2:?password must be set}
  x_ndm_realm=${3:?x_ndm_realm must be set}
  x_ndm_challenge=${4:?x_ndm_challenge must be set}

  md5string="${login}:${x_ndm_realm}:${password}"
  md5hash=$(echo -n "$md5string" | "${deps[md5]}" | awk '{print $1}')
  sha256string="$x_ndm_challenge$md5hash"
  echo -n "$sha256string" | shasum -a 256 | awk '{print $1}'
}

# src/lib/functions/get_base_url.sh
# shellcheck shell=bash
function get_base_url() {
  local host port proto
  host="${1:?host must be set}"
  port="${2}"
  proto=$([ -n "$3" ] && echo "https" || echo "http")

  echo "${proto}://${host}${port:+:$port}"
}

# src/lib/functions/get_cookie_path.sh
# shellcheck shell=bash
function get_cookie_path() {
  local hostname port

  hostname="${1:?hostname must be set}"
  port="${2}"

  echo "${TMPDIR:-/tmp/}keenclient-${hostname}${port:+:$port}.cookie"
}

# src/lib/functions/get_header_value.sh
# shellcheck shell=bash
function get_header_value() {
  local key response

  key="${1:?header key must be set}"
  response="${2:?response must be set}"

  echo "${response}" |
    grep "${key}" |
    awk -F ": " '{print $2}' |
    tr -d '\r'
}

# src/lib/functions/get_status_code.sh
# shellcheck shell=bash
function get_status_code() {
  local response
  response="${1:?response must be set}"

  echo "$response" | head -n 1 | grep -e "^HTTP" | awk '{print $2}'
}

# src/lib/functions/http.sh
# shellcheck shell=bash
function request() {
  local hostname port is_https url_path request_data \
    output_path base_url cookie_path

  hostname="${1:?hostname must be set}"
  port="${2}"
  is_https="${3}"
  url_path="${4:?url path must be set}"
  request_data="${5}"
  output_path="${6}"

  base_url=$(get_base_url "${hostname}" "${port}" "${is_https}")
  cookie_path=$(get_cookie_path "${hostname}" "${port}")

  ARGS=(-sS -D -)

  if [[ -n "${request_data}" ]]; then
    ARGS+=(--json "${request_data}")
  fi

  if [[ -n "${output_path}" ]]; then
    ARGS+=(-o "${output_path}")
  fi

  curl 2>&1 \
    "${ARGS[@]}" \
    "${base_url}${url_path}" \
    --cookie "${cookie_path}" \
    --cookie-jar "${cookie_path}"
}

# request with only headers in response
function request_ohir() {
  request "${1}" "${2}" "${3}" "${4}" "${5}" "/dev/null"
}

# src/lib/functions/logging.sh
# shellcheck shell=bash
function error() {
  echo -e "($(date +'%Y-%m-%dT%H:%M:%S')) ERROR: $1" >&2
  exit 1
}

function log() {
  [[ "$2" ]] &&
    echo -e "($(date +'%Y-%m-%dT%H:%M:%S')) $1" >&2
  return 0
}

# src/lib/functions/login.sh
# shellcheck shell=bash
function login() {
  local hostname port is_https verbose login password response
  hostname="${1:?hostname must be set}"
  port="${2}"
  is_https="${3}"
  verbose="${4}"
  login="${5:?login must be set}"
  password="${6:?password must be set}"

  if ! response=$(
    request_ohir \
      "${hostname}" \
      "${port}" \
      "${is_https}" \
      "/auth"
  ); then
    error "Login failed, $response"
  fi

  status_code=$(get_status_code "$response")
  [[ "$status_code" -eq 200 ]] &&
    log "Already logged in" "${verbose}" &&
    return 0

  [[ "$status_code" -ne 401 ]] &&
    error "Login failed${status_code:+, status_code: ${status_code}}"

  x_ndm_realm=$(get_header_value "x-ndm-realm" "${response}")
  x_ndm_challenge=$(get_header_value "x-ndm-challenge" "${response}")

  [[ -z "$x_ndm_realm" || -z "$x_ndm_challenge" ]] &&
    error "Login failed, required headers not found"

  hash=$(
    calculate_hash \
      "${login}" \
      "${password}" \
      "${x_ndm_realm}" \
      "${x_ndm_challenge}"
  )

  log "Log in to ${hostname}..." "${verbose}"

  if ! response=$(
    request_ohir \
      "${hostname}" \
      "${port}" \
      "${is_https}" \
      "/auth" \
      "{\"login\":\"${login}\",\"password\":\"$hash\"}"
  ); then
    error "Login failed, $response"
  fi

  status_code=$(get_status_code "$response")
  [[ "$status_code" -ne 200 ]] &&
    error "Login failed${status_code:+, status_code: ${status_code}}"

  log "Login successful" "${verbose}"
}

# src/lib/functions/request.sh
# shellcheck shell=bash
function request_data() {
  local hostname port is_https url_path request_data output \
    output_path verbose login password response
  hostname="${1:?hostname must be set}"
  port="${2}"
  is_https="${3}"
  url_path="${4}"
  request_data="${5}"
  output="${6}"
  verbose="${7}"
  login="${8:?login must be set}"
  password="${9:?password must be set}"

  output_path=$(mktemp)

  login "${hostname}" "${port}" "${is_https}" "${verbose}" \
    "${login}" "${password}"

  [[ -n "${output}" ]] &&
    output_path="${output}"

  log "Trying ${hostname}..." "${verbose}"

  if ! response=$(
    request \
      "${hostname}" \
      "${port}" \
      "${is_https}" \
      "${url_path}" \
      "${request_data}" \
      "${output_path}"
  ); then
    error "Request failed, $response"
  fi

  status_code=$(get_status_code "$response")
  [[ "$status_code" != 2* ]] &&
    error "Request failed${status_code:+, status_code: ${status_code}}"

  [[ -z "${output}" ]] &&
    cat "${output_path}" &&
    rm "${output_path}"

  log "Request successful, status_code: ${status_code}" "${verbose}"
}

# src/lib/validations/validate_file_path.sh
# shellcheck shell=bash
validate_file_path() {
  [[ -d "$1" ]] && echo "File cannot be a directory"
  [[ -d "$(dirname "$1")" ]] ||
    echo "File must be with an existing parent directory"
}

# src/lib/validations/validate_json.sh
# shellcheck shell=bash disable=SC2154
validate_json() {
  if ! result=$(echo "$1" | "${deps[json]}" 2>&1); then
    echo "${result}"
  fi
}

# :command.command_functions
# :command.function
keenclient_login_command() {
  # src/login_command.sh
  # shellcheck shell=bash disable=SC2154 disable=SC2168
  local hostname port is_https login password
  hostname="${args[--hostname]}"
  port="${args[--port]}"
  is_https="${args[--https]}"
  login="${KEENETIC_USERNAME:?KEENETIC_USERNAME env must be set}"
  password="${KEENETIC_PASSWORD:?KEENETIC_PASSWORD env must be set}"

  login "${hostname}" "${port}" "${is_https}" "1" "${login}" "${password}"

}

# :command.function
keenclient_request_command() {
  # src/request_command.sh
  # shellcheck shell=bash disable=SC2154 disable=SC2168
  local hostname port is_https verbose url_path request_data login password
  hostname="${args[--hostname]}"
  port="${args[--port]}"
  is_https="${args[--https]}"
  output="${args[--output]}"
  verbose="${args[--verbose]}"
  url_path="${args[url_path]}"
  request_data="${args[request_data]}"
  login="${KEENETIC_USERNAME:?KEENETIC_USERNAME env must be set}"
  password="${KEENETIC_PASSWORD:?KEENETIC_PASSWORD env must be set}"

  request_data "${hostname}" "${port}" "${is_https}" "${url_path}" \
    "${request_data}" "${output}" "${verbose}" "${login}" "${password}"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        keenclient_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${KEENETIC_USERNAME:-}" ]]; then
    printf "missing required environment variable: KEENETIC_USERNAME\n" >&2
    exit 1
  fi
  if [[ -z "${KEENETIC_PASSWORD:-}" ]]; then
    printf "missing required environment variable: KEENETIC_PASSWORD\n" >&2
    exit 1
  fi

  # :command.dependencies_filter
  if command -v curl >/dev/null 2>&1; then
    deps['curl']="$(command -v curl | head -n1)"
  else
    printf "missing dependency: curl\n" >&2
    printf "%s\n" "https://curl.se/" >&2
    exit 1
  fi

  if command -v md5sum md5 >/dev/null 2>&1; then
    deps['md5']="$(command -v md5sum md5 | head -n1)"
  else
    printf "missing dependency: md5 (md5sum/md5)\n" >&2
    exit 1
  fi

  if command -v jq json_pp >/dev/null 2>&1; then
    deps['json']="$(command -v jq json_pp | head -n1)"
  else
    printf "missing dependency: json (jq/json_pp)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    login)
      action="login"
      shift
      keenclient_login_parse_requirements "$@"
      shift $#
      ;;

    request)
      action="request"
      shift
      keenclient_request_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      keenclient_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
keenclient_login_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        keenclient_login_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="login"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --hostname)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--hostname']="$2"
          shift
          shift
        else
          printf "%s\n" "--hostname requires an argument: --hostname HOSTNAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --port)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--port']="$2"
          shift
          shift
        else
          printf "%s\n" "--port requires an argument: --port PORT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --https)

        # :flag.case_no_arg
        args['--https']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--hostname']:-} ]] || args['--hostname']="192.168.1.1"

}

# :command.parse_requirements
keenclient_request_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        keenclient_request_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="request"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --hostname)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--hostname']="$2"
          shift
          shift
        else
          printf "%s\n" "--hostname requires an argument: --hostname HOSTNAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --port)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--port']="$2"
          shift
          shift
        else
          printf "%s\n" "--port requires an argument: --port PORT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --https)

        # :flag.case_no_arg
        args['--https']=1
        shift
        ;;

      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_parent_dir_exists "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--output, -o OUTPUT" "$(validate_parent_dir_exists "$2")" >&2
            exit 1
          fi

          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --verbose)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['url_path']+x} ]]; then

          args['url_path']=$1
          shift
        elif [[ -z ${args['request_data']+x} ]]; then
          # :argument.validations
          if [[ -n $(validate_json "$1") ]]; then
            printf "validation error in %s:\n%s\n" "REQUEST_DATA" "$(validate_json "$1")" >&2
            exit 1
          fi

          args['request_data']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['url_path']+x} ]]; then
    printf "missing required argument: URL_PATH\nusage: keenclient request URL_PATH [REQUEST_DATA] [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--hostname']:-} ]] || args['--hostname']="192.168.1.1"

}

# :command.initialize
initialize() {
  version="0.0.1"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "login") keenclient_login_command ;;
    "request") keenclient_request_command ;;
  esac
}

initialize
run "$@"
