#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
keencli_usage() {
  if [[ -n $long_usage ]]; then
    printf "keencli - Keenetic command-line interface written in Bash\n"
    echo

  else
    printf "keencli - Keenetic command-line interface written in Bash\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keencli COMMAND\n"
  printf "  keencli [COMMAND] --help | -h\n"
  printf "  keencli --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Make an http-request to the Keenetic router\n" "request"
  printf "  %s   Show various diagnostic information\n" "show   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "KEENETIC_USERNAME (required)"
    printf "    Keenetic username\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "KEENETIC_PASSWORD (required)"
    printf "    Keenetic password\n"
    echo

  fi
}

# :command.usage
keencli_request_usage() {
  if [[ -n $long_usage ]]; then
    printf "keencli request - Make an http-request to the Keenetic router\n"
    echo

  else
    printf "keencli request - Make an http-request to the Keenetic router\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keencli request URL_PATH [REQUEST_DATA] [OPTIONS]\n"
  printf "  keencli request --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--baseurl BASEURL"
    printf "    Keenetic base URL (example \`http://192.168.1.1\`,\n    \`https://myrouter01.keenetic.link\`)\n"
    printf "    Default: http://192.168.1.1\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUT"
    printf "    Write to file instead of stdout\n"
    echo

    # :flag.usage
    printf "  %s\n" "--format, -f FORMAT"
    printf "\n"
    printf "    Allowed: json, yaml, xml, props\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "URL_PATH"
    printf "    URL path (example \`/rci/show/system/\`)\n"
    echo

    # :argument.usage
    printf "  %s\n" "REQUEST_DATA"
    printf "    Request data (if the request_data parameter is specified, a POST request\n    will be made)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  keencli request /rci/\n"
    printf "  keencli request -f yaml -o /tmp/dump /rci/\n"
    printf "  keencli request --baseurl https://myrouter01.keenetic.link /rci/\n"
    printf "  keencli request --baseurl https://myrouter01.keenetic.link:8080 /rci/\n  '[{\"show\":{\"interface\":{}}}]'\n"
    echo

  fi
}

# :command.usage
keencli_show_usage() {
  if [[ -n $long_usage ]]; then
    printf "keencli show - Show various diagnostic information\n"
    echo

  else
    printf "keencli show - Show various diagnostic information\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keencli show COMMAND\n"
  printf "  keencli show [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Show system status information\n" "system   "
  printf "  %s   Show interface status\n" "interface"
  printf "  %s   Show IP information\n" "ip       "
  printf "  %s   Show Internet check status\n" "internet "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
keencli_show_system_usage() {
  if [[ -n $long_usage ]]; then
    printf "keencli show system - Show system status information\n"
    echo

  else
    printf "keencli show system - Show system status information\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keencli show system [SUBCOMMAND] [OPTIONS]\n"
  printf "  keencli show system --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--baseurl BASEURL"
    printf "    Keenetic base URL (example \`http://192.168.1.1\`,\n    \`https://myrouter01.keenetic.link\`)\n"
    printf "    Default: http://192.168.1.1\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUT"
    printf "    Write to file instead of stdout\n"
    echo

    # :flag.usage
    printf "  %s\n" "--format, -f FORMAT"
    printf "\n"
    printf "    Allowed: json, yaml, xml, props\n"
    printf "    Default: yaml\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SUBCOMMAND"
    printf "    Subcommands:\n      caption - show system caption\n      country - show system country\n      cpustat - show system CPU status\n      debug   - show system debug status\n      mode    - show system mode status\n      zram    - show system zram swap status\n"
    printf "    Allowed: caption, country, cpustat, debug, mode, zram\n"
    echo

  fi
}

# :command.usage
keencli_show_interface_usage() {
  if [[ -n $long_usage ]]; then
    printf "keencli show interface - Show interface status\n"
    echo

  else
    printf "keencli show interface - Show interface status\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keencli show interface [INTERFACE_NAME] [SUBCOMMAND] [OPTIONS]\n"
  printf "  keencli show interface --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--baseurl BASEURL"
    printf "    Keenetic base URL (example \`http://192.168.1.1\`,\n    \`https://myrouter01.keenetic.link\`)\n"
    printf "    Default: http://192.168.1.1\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUT"
    printf "    Write to file instead of stdout\n"
    echo

    # :flag.usage
    printf "  %s\n" "--format, -f FORMAT"
    printf "\n"
    printf "    Allowed: json, yaml, xml, props\n"
    printf "    Default: yaml\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "INTERFACE_NAME"
    printf "    Interface name (example \`GigabitEthernet0\`)\n"
    echo

    # :argument.usage
    printf "  %s\n" "SUBCOMMAND"
    printf "    Subcommands:\n      stat - show interface statistics\n"
    printf "    Allowed: stat\n"
    echo

  fi
}

# :command.usage
keencli_show_ip_usage() {
  if [[ -n $long_usage ]]; then
    printf "keencli show ip - Show IP information\n"
    echo

  else
    printf "keencli show ip - Show IP information\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keencli show ip COMMAND\n"
  printf "  keencli show ip [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Show hotspot hosts\n" "hotspot"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
keencli_show_ip_hotspot_usage() {
  if [[ -n $long_usage ]]; then
    printf "keencli show ip hotspot - Show hotspot hosts\n"
    echo

  else
    printf "keencli show ip hotspot - Show hotspot hosts\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keencli show ip hotspot [MAC_ADDRESS] [OPTIONS]\n"
  printf "  keencli show ip hotspot --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--baseurl BASEURL"
    printf "    Keenetic base URL (example \`http://192.168.1.1\`,\n    \`https://myrouter01.keenetic.link\`)\n"
    printf "    Default: http://192.168.1.1\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUT"
    printf "    Write to file instead of stdout\n"
    echo

    # :flag.usage
    printf "  %s\n" "--format, -f FORMAT"
    printf "\n"
    printf "    Allowed: json, yaml, xml, props\n"
    printf "    Default: yaml\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "MAC_ADDRESS"
    printf "    MAC address (example \`b0:c2:b9:aa:0d:dd\`)\n"
    echo

  fi
}

# :command.usage
keencli_show_internet_usage() {
  if [[ -n $long_usage ]]; then
    printf "keencli show internet - Show Internet check status\n"
    echo

  else
    printf "keencli show internet - Show Internet check status\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  keencli show internet [OPTIONS]\n"
  printf "  keencli show internet --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--baseurl BASEURL"
    printf "    Keenetic base URL (example \`http://192.168.1.1\`,\n    \`https://myrouter01.keenetic.link\`)\n"
    printf "    Default: http://192.168.1.1\n"
    echo

    # :flag.usage
    printf "  %s\n" "--output, -o OUTPUT"
    printf "    Write to file instead of stdout\n"
    echo

    # :flag.usage
    printf "  %s\n" "--format, -f FORMAT"
    printf "\n"
    printf "    Allowed: json, yaml, xml, props\n"
    printf "    Default: yaml\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/functions/calculate_hash.sh
# shellcheck shell=bash
function calculate_hash() {
  local login password x_ndm_realm x_ndm_challenge

  login=${1:?login must be set}
  password=${2:?password must be set}
  x_ndm_realm=${3:?x_ndm_realm must be set}
  x_ndm_challenge=${4:?x_ndm_challenge must be set}

  md5string="${login}:${x_ndm_realm}:${password}"
  md5hash=$(md5_hash "$md5string")
  sha256string="$x_ndm_challenge$md5hash"
  echo -n "$sha256string" | shasum -a 256 | awk '{print $1}'
}

# src/lib/functions/convert_to.sh
# shellcheck shell=bash
convert_to() {
  input_format="${1:?input_format must be set}"
  output_format="${2:?output_format must be set}"

  yq -r -e \
    -p "${input_format}" \
    -o "${output_format}" \
    </dev/stdin 2>&1
}

convert_json_to() {
  convert_to "json" "${1}"
}

# src/lib/functions/logging.sh
# shellcheck shell=bash
function error() {
  echo -e "($(date +'%Y-%m-%dT%H:%M:%S')) ERROR: $1" >&2
  exit 1
}

function log() {
  echo -e "($(date +'%Y-%m-%dT%H:%M:%S')) $1" >&2
}

function debug() {
  [[ "$DEBUG" ]] &&
    echo -e "($(date +'%Y-%m-%dT%H:%M:%S')) DEBUG: $1" >&2
  return 0
}

# src/lib/functions/md5_hash.sh
# shellcheck shell=bash disable=SC2154
function md5_hash() {
  echo -n "$1" | "${deps[md5]}" | awk '{print $1}'
}

# src/lib/http/get_http_cookie_path.sh
# shellcheck shell=bash
function get_http_cookie_path() {
  local baseurl

  baseurl="${1:?baseurl must be set}"

  echo "${TMPDIR:-/tmp/}keencli-$(md5_hash "${baseurl}").cookie"
}

# src/lib/http/get_http_header_value.sh
# shellcheck shell=bash
function get_http_header_value() {
  local key response

  key="${1:?header key must be set}"
  response="${2:?response must be set}"

  echo "${response}" |
    grep "${key}" |
    awk -F ": " '{print $2}' |
    tr -d '\r'
}

# src/lib/http/get_http_status_code.sh
# shellcheck shell=bash
function get_http_status_code() {
  local response
  response="${1:?response must be set}"

  echo "$response" | head -n 1 | grep -e "^HTTP" | awk -F " " '{print $2}'
}

# src/lib/http/http_command.sh
# shellcheck shell=bash
function http_command() {
  local baseurl url_path request_data output
  baseurl="${1:?baseurl must be set}"
  url_path="${2}"
  request_data="${3}"
  output="${4:-/dev/stdout}"
  format="${5}"

  http_login "${baseurl}"

  debug "Trying ${baseurl}..."

  data_path=$(mktemp)

  if ! result=$(
    http_request \
      "${baseurl}" \
      "${url_path}" \
      "${request_data}" \
      "${data_path}"
  ); then
    error "Request failed, $result"
  fi

  status_code=$(get_http_status_code "$result")
  [[ "$status_code" != 2* ]] &&
    error "Request failed${status_code:+, status_code: ${status_code}}"

  debug "Request successful, status_code: ${status_code}"

  if [[ -n "${format}" ]]; then
    if ! convert_json_to "${format}" <"${data_path}" >"${output}"; then
      error "Response conversion error"
    fi
  else
    cat "${data_path}" >"${output}"
  fi

  rm "${data_path}"
}

# src/lib/http/http_login.sh
# shellcheck shell=bash
function http_login() {
  local baseurl login password
  baseurl="${1:?baseurl must be set}"
  login="${KEENETIC_USERNAME:?KEENETIC_USERNAME env must be set}"
  password="${KEENETIC_PASSWORD:?KEENETIC_PASSWORD env must be set}"

  if ! result=$(
    http_request_ohir \
      "${baseurl}" \
      "/auth"
  ); then
    error "Login failed, $result"
  fi

  status_code=$(get_http_status_code "$result")
  [[ "$status_code" -eq 200 ]] &&
    debug "Already logged in" &&
    return 0

  [[ "$status_code" -ne 401 ]] &&
    error "Login failed${status_code:+, status_code: ${status_code}}"

  x_ndm_realm=$(get_http_header_value "x-ndm-realm" "${result}")
  x_ndm_challenge=$(get_http_header_value "x-ndm-challenge" "${result}")

  [[ -z "$x_ndm_realm" || -z "$x_ndm_challenge" ]] &&
    error "Login failed, required headers not found"

  hash=$(
    calculate_hash \
      "${login}" \
      "${password}" \
      "${x_ndm_realm}" \
      "${x_ndm_challenge}"
  )

  debug "Log in to ${baseurl}..."
  if ! result=$(
    http_request_ohir \
      "${baseurl}" \
      "/auth" \
      "{\"login\":\"${login}\",\"password\":\"$hash\"}"
  ); then
    error "Login failed, $result"
  fi

  status_code=$(get_http_status_code "$result")
  [[ "$status_code" -ne 200 ]] &&
    error "Login failed${status_code:+, status_code: ${status_code}}"

  debug "Login successful"
}

# src/lib/http/http_request.sh
# shellcheck shell=bash
function http_request() {
  local baseurl url_path request_data \
    output_path cookie_path

  baseurl="${1:?baseurl must be set}"
  url_path="${2:?url path must be set}"
  request_data="${3}"
  output_path="${4}"

  cookie_path=$(get_http_cookie_path "${baseurl}")

  ARGS=(-sS -D -)

  if [[ -n "${request_data}" ]]; then
    ARGS+=(--json "${request_data}")
  fi

  if [[ -n "${output_path}" ]]; then
    ARGS+=(-o "${output_path}")
  fi

  curl 2>&1 \
    "${ARGS[@]}" \
    "${baseurl}${url_path}" \
    --cookie "${cookie_path}" \
    --cookie-jar "${cookie_path}"
}

# request with only headers in response
function http_request_ohir() {
  http_request "${1}" "${2}" "${3}" "/dev/null"
}

# src/lib/validations/validate_baseurl.sh
# shellcheck shell=bash

baseurl_regex="^https?:\/\/((([0-9]{1,3}\.){3}[0-9]{1,3})|([a-zA-Z0-9.-]+(\.[a-zA-Z]{2,4}){1,2}))(:[0-9]+)?$"

validate_baseurl() {
  if [[ ! "${1}" =~ ${baseurl_regex} ]]; then
    echo "Invalid base URL, please see examples"
  fi
}

# src/lib/validations/validate_file_path.sh
# shellcheck shell=bash
validate_file_path() {
  [[ -d "$1" ]] && echo "File cannot be a directory"
  [[ -d "$(dirname "$1")" ]] ||
    echo "File must be with an existing parent directory"
}

# src/lib/validations/validate_json.sh
# shellcheck shell=bash disable=SC2154
validate_json() {
  if ! result=$(echo "$1" | yq -p json 2>&1); then
    echo "${result}"
  fi
}

# :command.command_functions
# :command.function
keencli_request_command() {
  # src/request_command.sh
  # shellcheck shell=bash disable=SC2154
  http_command \
    "${args[--baseurl]}" \
    "${args[url_path]}" \
    "${args[request_data]}" \
    "${args[--output]}" \
    "${args[--format]}"

}

# :command.function
keencli_show_system_command() {
  # src/show_system_command.sh
  # shellcheck shell=bash disable=SC2154
  url_path="/rci/show/system"

  subcommand="${args[subcommand]}"
  if [[ -n "${subcommand}" ]]; then
    url_path="${url_path}/${subcommand}"
  fi

  http_command \
    "${args[--baseurl]}" \
    "${url_path}" \
    "${args[request_data]}" \
    "${args[--output]}" \
    "${args[--format]}"

}

# :command.function
keencli_show_interface_command() {
  # src/show_interface_command.sh
  # shellcheck shell=bash disable=SC2154
  url_path="/rci/show/interface"

  subcommand="${args[subcommand]}"
  if [[ -n "${subcommand}" ]]; then
    url_path="${url_path}/${subcommand}"
  fi

  interface_name="${args[interface_name]}"
  if [[ -n "${interface_name}" ]]; then
    url_path="${url_path}?name=${interface_name}"
  fi

  http_command \
    "${args[--baseurl]}" \
    "${url_path}" \
    "${args[request_data]}" \
    "${args[--output]}" \
    "${args[--format]}"

}

# :command.function
keencli_show_ip_hotspot_command() {
  # src/show_ip_hotspot_command.sh
  # shellcheck shell=bash disable=SC2154
  url_path="/rci/show/ip/hotspot"

  mac_address="${args[mac_address]}"
  if [[ -n "${mac_address}" ]]; then
    url_path="${url_path}?mac=${mac_address}"
  fi

  http_command \
    "${args[--baseurl]}" \
    "${url_path}" \
    "${args[request_data]}" \
    "${args[--output]}" \
    "${args[--format]}"

}

# :command.function
keencli_show_internet_command() {
  # src/show_internet_command.sh
  # shellcheck shell=bash disable=SC2154
  url_path="/rci/show/internet/status"

  http_command \
    "${args[--baseurl]}" \
    "${url_path}" \
    "${args[request_data]}" \
    "${args[--output]}" \
    "${args[--format]}"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        keencli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${KEENETIC_USERNAME:-}" ]]; then
    printf "missing required environment variable: KEENETIC_USERNAME\n" >&2
    exit 1
  fi
  if [[ -z "${KEENETIC_PASSWORD:-}" ]]; then
    printf "missing required environment variable: KEENETIC_PASSWORD\n" >&2
    exit 1
  fi

  # :command.dependencies_filter
  if command -v curl >/dev/null 2>&1; then
    deps['curl']="$(command -v curl | head -n1)"
  else
    printf "missing dependency: curl\n" >&2
    printf "%s\n" "https://curl.se/" >&2
    exit 1
  fi

  if command -v yq >/dev/null 2>&1; then
    deps['yq']="$(command -v yq | head -n1)"
  else
    printf "missing dependency: yq\n" >&2
    printf "%s\n" "https://mikefarah.gitbook.io/yq/" >&2
    exit 1
  fi

  if command -v md5sum md5 >/dev/null 2>&1; then
    deps['md5']="$(command -v md5sum md5 | head -n1)"
  else
    printf "missing dependency: md5 (md5sum/md5)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    request)
      action="request"
      shift
      keencli_request_parse_requirements "$@"
      shift $#
      ;;

    show)
      action="show"
      shift
      keencli_show_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      keencli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
keencli_request_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        keencli_request_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="request"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --baseurl)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_baseurl "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--baseurl BASEURL" "$(validate_baseurl "$2")" >&2
            exit 1
          fi

          args['--baseurl']="$2"
          shift
          shift
        else
          printf "%s\n" "--baseurl requires an argument: --baseurl BASEURL" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_path "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--output, -o OUTPUT" "$(validate_file_path "$2")" >&2
            exit 1
          fi

          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --format | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--format']="$2"
          shift
          shift
        else
          printf "%s\n" "--format requires an argument: --format, -f FORMAT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['url_path']+x} ]]; then

          args['url_path']=$1
          shift
        elif [[ -z ${args['request_data']+x} ]]; then
          # :argument.validations
          if [[ -n $(validate_json "$1") ]]; then
            printf "validation error in %s:\n%s\n" "REQUEST_DATA" "$(validate_json "$1")" >&2
            exit 1
          fi

          args['request_data']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['url_path']+x} ]]; then
    printf "missing required argument: URL_PATH\nusage: keencli request URL_PATH [REQUEST_DATA] [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--baseurl']:-} ]] || args['--baseurl']="http://192.168.1.1"

  # :command.whitelist_filter
  if [[ ${args['--format']} ]] && [[ ! ${args['--format']} =~ ^(json|yaml|xml|props)$ ]]; then
    printf "%s\n" "--format must be one of: json, yaml, xml, props" >&2
    exit 1
  fi

}

# :command.parse_requirements
keencli_show_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        keencli_show_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    system)
      action="system"
      shift
      keencli_show_system_parse_requirements "$@"
      shift $#
      ;;

    interface)
      action="interface"
      shift
      keencli_show_interface_parse_requirements "$@"
      shift $#
      ;;

    ip)
      action="ip"
      shift
      keencli_show_ip_parse_requirements "$@"
      shift $#
      ;;

    internet)
      action="internet"
      shift
      keencli_show_internet_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      keencli_show_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
keencli_show_system_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        keencli_show_system_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="show system"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --baseurl)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_baseurl "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--baseurl BASEURL" "$(validate_baseurl "$2")" >&2
            exit 1
          fi

          args['--baseurl']="$2"
          shift
          shift
        else
          printf "%s\n" "--baseurl requires an argument: --baseurl BASEURL" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_path "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--output, -o OUTPUT" "$(validate_file_path "$2")" >&2
            exit 1
          fi

          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --format | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--format']="$2"
          shift
          shift
        else
          printf "%s\n" "--format requires an argument: --format, -f FORMAT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['subcommand']+x} ]]; then

          args['subcommand']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--baseurl']:-} ]] || args['--baseurl']="http://192.168.1.1"
  [[ -n ${args['--format']:-} ]] || args['--format']="yaml"

  # :command.whitelist_filter
  if [[ -n ${args['subcommand']} ]] && [[ ! ${args['subcommand']} =~ ^(caption|country|cpustat|debug|mode|zram)$ ]]; then
    printf "%s\n" "subcommand must be one of: caption, country, cpustat, debug, mode, zram" >&2
    exit 1
  fi
  if [[ ${args['--format']} ]] && [[ ! ${args['--format']} =~ ^(json|yaml|xml|props)$ ]]; then
    printf "%s\n" "--format must be one of: json, yaml, xml, props" >&2
    exit 1
  fi

}

# :command.parse_requirements
keencli_show_interface_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        keencli_show_interface_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="show interface"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --baseurl)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_baseurl "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--baseurl BASEURL" "$(validate_baseurl "$2")" >&2
            exit 1
          fi

          args['--baseurl']="$2"
          shift
          shift
        else
          printf "%s\n" "--baseurl requires an argument: --baseurl BASEURL" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_path "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--output, -o OUTPUT" "$(validate_file_path "$2")" >&2
            exit 1
          fi

          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --format | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--format']="$2"
          shift
          shift
        else
          printf "%s\n" "--format requires an argument: --format, -f FORMAT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['interface_name']+x} ]]; then

          args['interface_name']=$1
          shift
        elif [[ -z ${args['subcommand']+x} ]]; then

          args['subcommand']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--baseurl']:-} ]] || args['--baseurl']="http://192.168.1.1"
  [[ -n ${args['--format']:-} ]] || args['--format']="yaml"

  # :command.whitelist_filter
  if [[ -n ${args['subcommand']} ]] && [[ ! ${args['subcommand']} =~ ^(stat)$ ]]; then
    printf "%s\n" "subcommand must be one of: stat" >&2
    exit 1
  fi
  if [[ ${args['--format']} ]] && [[ ! ${args['--format']} =~ ^(json|yaml|xml|props)$ ]]; then
    printf "%s\n" "--format must be one of: json, yaml, xml, props" >&2
    exit 1
  fi

}

# :command.parse_requirements
keencli_show_ip_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        keencli_show_ip_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    hotspot)
      action="hotspot"
      shift
      keencli_show_ip_hotspot_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      keencli_show_ip_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
keencli_show_ip_hotspot_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        keencli_show_ip_hotspot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="show ip hotspot"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --baseurl)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_baseurl "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--baseurl BASEURL" "$(validate_baseurl "$2")" >&2
            exit 1
          fi

          args['--baseurl']="$2"
          shift
          shift
        else
          printf "%s\n" "--baseurl requires an argument: --baseurl BASEURL" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_path "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--output, -o OUTPUT" "$(validate_file_path "$2")" >&2
            exit 1
          fi

          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --format | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--format']="$2"
          shift
          shift
        else
          printf "%s\n" "--format requires an argument: --format, -f FORMAT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['mac_address']+x} ]]; then

          args['mac_address']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--baseurl']:-} ]] || args['--baseurl']="http://192.168.1.1"
  [[ -n ${args['--format']:-} ]] || args['--format']="yaml"

  # :command.whitelist_filter
  if [[ ${args['--format']} ]] && [[ ! ${args['--format']} =~ ^(json|yaml|xml|props)$ ]]; then
    printf "%s\n" "--format must be one of: json, yaml, xml, props" >&2
    exit 1
  fi

}

# :command.parse_requirements
keencli_show_internet_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        keencli_show_internet_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="show internet"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --baseurl)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_baseurl "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--baseurl BASEURL" "$(validate_baseurl "$2")" >&2
            exit 1
          fi

          args['--baseurl']="$2"
          shift
          shift
        else
          printf "%s\n" "--baseurl requires an argument: --baseurl BASEURL" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --output | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          # :flag.validations
          if [[ -n $(validate_file_path "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--output, -o OUTPUT" "$(validate_file_path "$2")" >&2
            exit 1
          fi

          args['--output']="$2"
          shift
          shift
        else
          printf "%s\n" "--output requires an argument: --output, -o OUTPUT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --format | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--format']="$2"
          shift
          shift
        else
          printf "%s\n" "--format requires an argument: --format, -f FORMAT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--baseurl']:-} ]] || args['--baseurl']="http://192.168.1.1"
  [[ -n ${args['--format']:-} ]] || args['--format']="yaml"

  # :command.whitelist_filter
  if [[ ${args['--format']} ]] && [[ ! ${args['--format']} =~ ^(json|yaml|xml|props)$ ]]; then
    printf "%s\n" "--format must be one of: json, yaml, xml, props" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.1"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "request") keencli_request_command ;;
    "show") keencli_show_command ;;
    "show system") keencli_show_system_command ;;
    "show interface") keencli_show_interface_command ;;
    "show ip") keencli_show_ip_command ;;
    "show ip hotspot") keencli_show_ip_hotspot_command ;;
    "show internet") keencli_show_internet_command ;;
  esac
}

initialize
run "$@"
